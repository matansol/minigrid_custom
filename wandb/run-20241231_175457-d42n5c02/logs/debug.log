2024-12-31 17:54:57,784 INFO    MainThread:2476 [wandb_setup.py:_flush():68] Current SDK version is 0.19.1
2024-12-31 17:54:57,784 INFO    MainThread:2476 [wandb_setup.py:_flush():68] Configure stats pid to 2476
2024-12-31 17:54:57,784 INFO    MainThread:2476 [wandb_setup.py:_flush():68] Loading settings from C:\Users\matan\.config\wandb\settings
2024-12-31 17:54:57,784 INFO    MainThread:2476 [wandb_setup.py:_flush():68] Loading settings from C:\Users\matan\master_thesis\minigrid_custom\wandb\settings
2024-12-31 17:54:57,784 INFO    MainThread:2476 [wandb_setup.py:_flush():68] Loading settings from environment variables
2024-12-31 17:54:57,800 INFO    MainThread:2476 [wandb_init.py:_log_setup():528] Logging user logs to C:\Users\matan\master_thesis\minigrid_custom\wandb\run-20241231_175457-d42n5c02\logs\debug.log
2024-12-31 17:54:57,800 INFO    MainThread:2476 [wandb_init.py:_log_setup():529] Logging internal logs to C:\Users\matan\master_thesis\minigrid_custom\wandb\run-20241231_175457-d42n5c02\logs\debug-internal.log
2024-12-31 17:54:57,800 INFO    MainThread:2476 [wandb_init.py:init():644] calling init triggers
2024-12-31 17:54:57,800 INFO    MainThread:2476 [wandb_init.py:init():650] wandb.init called with sweep_config: {}
config: {'algorithm': 'PPO', 'max_steps': 300, 'preference_vector': [0, 0, 0, -3, 0.5]}
2024-12-31 17:54:57,800 INFO    MainThread:2476 [wandb_init.py:init():680] starting backend
2024-12-31 17:54:57,800 INFO    MainThread:2476 [wandb_init.py:init():684] sending inform_init request
2024-12-31 17:54:57,815 INFO    MainThread:2476 [backend.py:_multiprocessing_setup():104] multiprocessing start_methods=spawn, using: spawn
2024-12-31 17:54:57,822 INFO    MainThread:2476 [wandb_init.py:init():697] backend started and connected
2024-12-31 17:54:57,824 INFO    MainThread:2476 [wandb_init.py:init():790] updated telemetry
2024-12-31 17:54:57,878 INFO    MainThread:2476 [wandb_init.py:init():822] communicating run to backend with 90.0 second timeout
2024-12-31 17:54:58,345 INFO    MainThread:2476 [wandb_init.py:init():874] starting run threads in backend
2024-12-31 17:54:58,593 INFO    MainThread:2476 [wandb_run.py:_console_start():2374] atexit reg
2024-12-31 17:54:58,593 INFO    MainThread:2476 [wandb_run.py:_redirect():2224] redirect: wrap_raw
2024-12-31 17:54:58,593 INFO    MainThread:2476 [wandb_run.py:_redirect():2289] Wrapping output streams.
2024-12-31 17:54:58,593 INFO    MainThread:2476 [wandb_run.py:_redirect():2314] Redirects installed.
2024-12-31 17:54:58,595 INFO    MainThread:2476 [wandb_init.py:init():916] run started, returning control to user process
2024-12-31 17:55:03,260 INFO    MainThread:2476 [wandb_watch.py:_watch():71] Watching
2024-12-31 17:55:03,260 INFO    MainThread:2476 [wandb_run.py:_config_callback():1279] config_cb None None {'algo': 'PPO', 'policy_class': "<class 'stable_baselines3.common.policies.MultiInputActorCriticPolicy'>", 'device': 'cuda', 'verbose': 1, 'policy_kwargs': "{'features_extractor_class': <class '__main__.ObjEnvExtractor'>}", 'num_timesteps': 0, '_total_timesteps': 1000000.0, '_num_timesteps_at_start': 0, 'seed': 'None', 'action_noise': 'None', 'start_time': 1735660503255157400, 'learning_rate': 0.001, 'tensorboard_log': 'None', '_last_obs': "OrderedDict([('image', array([[[[0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0],\n         [2, 2, 2, 2, 2, 2, 2],\n         [2, 1, 6, 1, 1, 9, 1],\n         [2, 1, 1, 1, 6, 9, 1],\n         [2, 1, 1, 1, 1, 1, 6],\n         [2, 1, 1, 1, 1, 1, 1]],\n\n        [[0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0],\n         [5, 5, 5, 5, 5, 5, 5],\n         [5, 0, 2, 0, 0, 0, 0],\n         [5, 0, 0, 0, 0, 0, 0],\n         [5, 0, 0, 0, 0, 0, 0],\n         [5, 0, 0, 0, 0, 0, 0]],\n\n        [[0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0],\n         [0, 0, 0, 0, 0, 0, 0]]]], dtype=uint8))])", '_last_episode_starts': '[ True]', '_last_original_obs': "OrderedDict([('image', array([[[[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]],\n\n        [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]],\n\n        [[2, 5, 0],\n         [2, 5, 0],\n         [2, 5, 0],\n         [2, 5, 0],\n         [2, 5, 0],\n         [2, 5, 0],\n         [2, 5, 0]],\n\n        [[2, 5, 0],\n         [1, 0, 0],\n         [6, 2, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [9, 0, 0],\n         [1, 0, 0]],\n\n        [[2, 5, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [6, 0, 0],\n         [9, 0, 0],\n         [1, 0, 0]],\n\n        [[2, 5, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [6, 0, 0]],\n\n        [[2, 5, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0],\n         [1, 0, 0]]]], dtype=uint8))])", '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1.0, '_stats_window_size': 100, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_custom_logger': 'False', 'env': '<stable_baselines3.common.vec_env.vec_transpose.VecTransposeImage object at 0x000001C720E41840>', '_vec_normalize_env': '<stable_baselines3.common.vec_env.vec_normalize.VecNormalize object at 0x000001C720E41480>', 'observation_space': "Dict('image': Box(0, 255, (3, 7, 7), uint8))", 'action_space': 'Discrete(7)', 'n_envs': 1, 'n_steps': 256, 'gamma': 0.99, 'gae_lambda': 0.95, 'ent_coef': 0.4, 'vf_coef': 0.5, 'max_grad_norm': 0.5, 'rollout_buffer_class': "<class 'stable_baselines3.common.buffers.DictRolloutBuffer'>", 'rollout_buffer_kwargs': '{}', 'batch_size': 16, 'n_epochs': 10, 'clip_range': '<function get_schedule_fn.<locals>.<lambda> at 0x000001C7356A8D30>', 'clip_range_vf': 'None', 'normalize_advantage': 'True', 'target_kl': 'None', 'lr_schedule': '<function get_schedule_fn.<locals>.<lambda> at 0x000001C720EA35B0>', 'rollout_buffer': '<stable_baselines3.common.buffers.DictRolloutBuffer object at 0x000001C727353760>', 'policy': 'MultiInputActorCriticPolicy(\n  (features_extractor): ObjEnvExtractor(\n    (extractors): ModuleDict(\n      (image): Sequential(\n        (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))\n        (1): ReLU()\n        (2): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))\n        (3): ReLU()\n        (4): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))\n        (5): ReLU()\n        (6): Flatten(start_dim=1, end_dim=-1)\n        (7): Linear(in_features=1024, out_features=64, bias=True)\n        (8): ReLU()\n      )\n    )\n  )\n  (pi_features_extractor): ObjEnvExtractor(\n    (extractors): ModuleDict(\n      (image): Sequential(\n        (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))\n        (1): ReLU()\n        (2): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))\n        (3): ReLU()\n        (4): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))\n        (5): ReLU()\n        (6): Flatten(start_dim=1, end_dim=-1)\n        (7): Linear(in_features=1024, out_features=64, bias=True)\n        (8): ReLU()\n      )\n    )\n  )\n  (vf_features_extractor): ObjEnvExtractor(\n    (extractors): ModuleDict(\n      (image): Sequential(\n        (0): Conv2d(3, 16, kernel_size=(2, 2), stride=(1, 1))\n        (1): ReLU()\n        (2): Conv2d(16, 32, kernel_size=(2, 2), stride=(1, 1))\n        (3): ReLU()\n        (4): Conv2d(32, 64, kernel_size=(2, 2), stride=(1, 1))\n        (5): ReLU()\n        (6): Flatten(start_dim=1, end_dim=-1)\n        (7): Linear(in_features=1024, out_features=64, bias=True)\n        (8): ReLU()\n      )\n    )\n  )\n  (mlp_extractor): MlpExtractor(\n    (policy_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n    (value_net): Sequential(\n      (0): Linear(in_features=64, out_features=64, bias=True)\n      (1): Tanh()\n      (2): Linear(in_features=64, out_features=64, bias=True)\n      (3): Tanh()\n    )\n  )\n  (action_net): Linear(in_features=64, out_features=7, bias=True)\n  (value_net): Linear(in_features=64, out_features=1, bias=True)\n)', '_logger': '<stable_baselines3.common.logger.Logger object at 0x000001C73568B460>'}
2024-12-31 17:57:41,299 WARNING MsgRouterThr:2476 [router.py:message_loop():75] message_loop has been closed
